{"version":3,"sources":["Temperature.js","Nodes.js","ApartmentSpaces.js","Apartment.js","App.js","reportWebVitals.js","index.js"],"names":["Temperature","nodes","temperatures","length","map","node","unprocessedDate","Date","last_message","timeElapsed","toDateString","toLocaleTimeString","retrieved_at","timeElapsed2Decimal","Math","round","toFixed","Fragment","room_temperature","radiator_temperature","Nodes","radiators","radiator","number","ApartmentSpaces","apartmentSpaces","aptSpaces","aptSpace","name","Apartment","apartments","apartmentName","apartment","Grid","xs","sm","md","Paper","spaces","App","useState","setApartments","useEffect","apartmentsArray","floors","floor","units","push","Container","container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MA4BeA,MAzBf,YAAkC,IAAVC,EAAS,EAATA,MAEbC,EAAeD,EAAME,OAAUF,EAAMG,KAAI,SAAAC,GAC5C,IAAIC,EAAkB,IAAIC,KAAKF,EAAKG,cAIhCC,GAHiBH,EAAgBI,eAChBJ,EAAgBK,mBAAmB,UAErCC,IAAeP,EAAKG,cAAgB,MACnDK,GAAuBC,KAAKC,MAAoB,IAAdN,GAAqB,KAAKO,QAAQ,GAGxE,OACI,cAAC,IAAMC,SAAP,UACI,0CAAaZ,EAAKa,iBAAlB,sBAAuDb,EAAKc,qBAA5D,mBAAkGN,EAAlG,kBAGL,oDAEP,OACI,cAAC,IAAMI,SAAP,UACMf,KCJCkB,MAhBf,YAAgC,IAAdC,EAAa,EAAbA,UAEd,OACI,8BACKA,EAAUlB,OAAUkB,GAAaA,EAAUjB,KAAI,SAAAkB,GAC5C,IAAIrB,EAAQqB,EAASrB,MACJqB,EAASC,OAC1B,OACI,cAAC,EAAD,CAAatB,MAAOA,OAErB,uDCWJuB,MArBf,YAA+C,IAApBC,EAAmB,EAAnBA,gBAEjBC,EAAYD,GAAmBA,EAAgBrB,KAAI,SAAAuB,GAErD,OACI,eAAC,IAAMV,SAAP,WACKU,EAASC,KACV,cAAC,EAAD,CAAOP,UAAWM,EAASN,kBAOvC,OACQ,kCACKK,K,gBCUFG,MAzBf,YAAoC,IAAfC,EAAc,EAAdA,WAEXC,EAAgBD,GAAcA,EAAW1B,KAAI,SAAA4B,GAC/C,OACI,cAAC,IAAMf,SAAP,UAEI,cAACgB,EAAA,EAAD,CAAMC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAA1B,SACI,eAACC,EAAA,EAAD,kBACSL,EAAUJ,KACf,cAAC,EAAD,CAAiBH,gBAAiBO,EAAUM,mBAShE,OACQ,cAAC,IAAMrB,SAAP,UACKc,K,QCcFQ,EA/BH,WACR,MAAoCC,qBAApC,mBAAOV,EAAP,KAAmBW,EAAnB,KAoBF,OAlBEC,qBAAU,WACN,IADY,EACNC,EAAkB,GADZ,cAEMC,KAFN,IAEZ,2BAA0B,CAAC,IAAD,EAAjBC,EAAiB,sBAKAA,EAAMC,OALN,IAKtB,2BAAmC,CAAC,IAA3Bd,EAA0B,QAG/BW,EAAgBI,KAAKf,IARH,gCAFd,8BAcZS,EAAcE,KAEf,IAGH,eAACK,EAAA,EAAD,WACE,6BAAKpB,MACL,cAACK,EAAA,EAAD,CAAMgB,WAAS,EAAf,SACE,cAAC,EAAD,CAAWnB,WAAYA,UCpBhBoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.d715b0e4.chunk.js","sourcesContent":["import React from 'react';\nimport { retrieved_at } from './1234_Test_Street.json';\n\nfunction Temperature ({ nodes }) {\n\n     const temperatures = nodes.length ? (nodes.map(node => {\n        let unprocessedDate = new Date(node.last_message);\n        let dateLastUpdate = unprocessedDate.toDateString();\n        let timeLastUpdate = unprocessedDate.toLocaleTimeString('en-US');\n\n        let timeElapsed = (retrieved_at - node.last_message) / 3600000;\n        let timeElapsed2Decimal = (Math.round(timeElapsed * 100) / 100).toFixed(2);\n\n        \n        return (\n            <React.Fragment>\n                <div>room = {node.room_temperature}F - - - radiator = {node.radiator_temperature}F - - - updated {timeElapsed2Decimal} hr ago</div>\n            </React.Fragment>     \n            )\n    })) : (<div>not installed yet</div>)\n    // console.log(temperatures)\n    return (\n        <React.Fragment>\n            { temperatures }\n        </React.Fragment>\n    )\n}\n\nexport default Temperature;","import React from \"react\";\nimport Temperature from \"./Temperature\";\n\nfunction Nodes ({ radiators }) {\n\n    return (\n        <div>\n            {radiators.length ? (radiators && radiators.map(radiator => {\n                let nodes = radiator.nodes;\n                let nodeNumber = radiator.number;\n                return (\n                    <Temperature nodes={nodes} />  \n                ) \n            })) : (<div>no radiators here</div>)\n            }\n        </div>\n    )\n};\n\nexport default Nodes;","import React from \"react\";\nimport Nodes from \"./Nodes\";\n\nfunction ApartmentSpaces({ apartmentSpaces }) {\n\n    const aptSpaces = apartmentSpaces && apartmentSpaces.map(aptSpace => {\n        // console.log(aptSpace)\n        return (\n            <React.Fragment>\n                {aptSpace.name}\n                <Nodes radiators={aptSpace.radiators} />\n            </React.Fragment>\n        )\n    })\n\n    \n\n    return (\n            <section>\n                {aptSpaces}\n            </section>\n    )\n}\n\nexport default ApartmentSpaces;","import React from \"react\"\nimport ApartmentSpaces from \"./ApartmentSpaces\"\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nfunction Apartment({ apartments }) {\n\n    const apartmentName = apartments && apartments.map(apartment => {\n        return (\n            <React.Fragment>\n                \n                <Grid xs={12} sm={12} md={12} >\n                    <Paper>\n                        APT {apartment.name}\n                        <ApartmentSpaces apartmentSpaces={apartment.spaces} />\n                    </Paper> \n                </Grid>\n            </React.Fragment>\n            )\n        }\n    );\n                \n\n    return (\n            <React.Fragment>\n                {apartmentName}\n            </React.Fragment>\n    )\n};\n\nexport default Apartment;","import { useState, useEffect} from 'react';\nimport { floors, name } from './1234_Test_Street.json';\nimport Apartment from './Apartment';\nimport { Container } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\n\n\nconst App = () => {\n    const [apartments, setApartments] = useState();\n\n    useEffect(() => {\n        const apartmentsArray = [];\n        for (let floor of floors) {\n\n            // COMMON HEATING AREA. ONLY 3RD FLOOR   \n\n            // FLOOR LEVELs\n            for (let apartment of floor.units) {\n                //side comment\n                //APT# && SPACES(dining, bedroom)\n                apartmentsArray.push(apartment);\n            }\n        }\n\n        setApartments(apartmentsArray);\n\n    }, [])\n\n  return (\n    <Container>\n      <h1>{name}</h1>\n      <Grid container >\n        <Apartment apartments={apartments} />\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}